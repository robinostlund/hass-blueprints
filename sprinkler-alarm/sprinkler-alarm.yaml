# https://github.com/blakeblackshear/frigate/issues/9271
blueprint:
  name: Sprinkler Alarm
  description: Start sprinklers on frigate events.
  domain: automation

  input:
    hass_base_url:
      name: Base URL
      description: "External URL for your Home Assistant instance" 

    binary_sensor_sprinkler_safety:
      name: "Sprinkler Safety Sensor"
      description: "This is a binary sensor you need to create which should be off when it is safe to run sprinklers."
      selector:
        entity:
          filter:
            - domain: binary_sensor
            - device_class: motion #TODO

    mqtt_frigate_event_topic:
      name: "Frigate Event Topic"
      description: "Your frigate mqtt event topic"
      default: frigate/events

    frigate_camera:
      name: "Frigate Camera Name"
      description: "Set your camera name from frigate here"
      selector:
        entity:
          integration: frigate
          domain: camera
          multiple: false

    frigate_zones:
      name: "Frigate Zone Name"
      description: "Set your zone name from frigate here when you want this automation to trigger"
      # A list (-) of zones you wish to recieve notifications for.
      default: []
      selector:
        object: {}

    frigate_labels:
      name: "Frigate Labels"
      description: "Select the labels you want to trigger this automation"
      selector:
        select:
          multiple: true
          options:
            - label: "Persons"
              value: "person"
          sort: true
      default: "Persons"

    # alarm_control_panel_home_alarm:
    #   name: "Home Alarm"
    #   description: "If you have a alarm and only want to trigger this automation when it is in different states"
    #   selector:
    #     entity:
    #       filter:
    #         - domain: alarm_control_panel

    notify_group: 
      name: "Notify Group"
      description: "Specify notify service to trigger on an event"
      default: ""

    #notify_telegram_chat_id:
    #  name: "Telegram Chat ID"
    #  description: "Telegram chat id"
      

      # selector:
      #   device:
      #     integration: mobile_app
      #     multiple: false


mode: single
trigger_variables:
  # frigate camera
  input_frigate_camera: !input frigate_camera
  frigate_camera: '{{ input_frigate_camera | replace(''camera.'', '''') }}'

trigger:
  - platform: mqtt
    topic: frigate/events
    #payload: '{{ frigate_camera }}/new'
    value_template: '{{ value_json[''after''][''camera''] }}/{{ value_json[''type'']}}'
    id: frigate-event

variables:
  # base
  hass_base_url: !input hass_base_url

  # frigate camera
  input_frigate_camera: !input frigate_camera
  frigate_camera: '{{ input_frigate_camera | replace(''camera.'', '''') }}'
  frigate_camera_name: '{{ frigate_camera | replace(''_'', '' '') | title }}'

  # frigate zones
  input_frigate_zones: !input frigate_zones
  frigate_zones: '{{ input_frigate_zones | list }}'
  #frigate_zones: '{{ input_frigate_zones }}'

  # frigate labels
  input_frigate_labels: !input frigate_labels
  #frigate_labels: '{{ input_frigate_labels | list }}'
  frigate_labels: '{{ input_frigate_labels }}'

  # telegram
  #telegram_chat_id: !input notify_telegram_chat_id


  # content
  payload_id: "{{ trigger.payload_json['after']['id'] }}"
  payload_object: "{{ trigger.payload_json['after']['label'] }}"
  payload_object_detected: "{{ objects|select('in', object)|list|length > 0 }}"
  payload_label: "{{ payload_object | title }}"
  payload_entered_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"
  #payload_entered_zones_changed: "{{ frigate_zones|length > 0 and (frigate_zones|select('in', entered_zones)|list|length > 0 and not frigate_zones|select('in', last_zones)|list|length) }}"

condition:
  - condition: and
    conditions:
      # verify we have an object
      - "{{ payload_object_detected }}"

      # verify the object is an object we should monitor
      - "{{ not frigate_labels|length or payload_object in frigate_labels }}"

      # verify the zone is a zone we should monitor
      #- "{{ frigate_zones|length > 0 and (frigate_zones|select('in', entered_zones)|list|length > 0 and not frigate_zones|select('in', last_zones)|list|length) }}"
      - "{{ not frigate_zones|length or frigate_zones|select('in', entered_zones)|list|length > 0 }}"

action:
  - alias: Send notification
    service: !input notify_group
    data_template:
      title: ðŸ’¦ {{ payload_label }} detected on {{ frigate_camera_name }} camera.
      message: |
        DEBUG: id {{ payload_id }}, object {{ payload_object }}, label {{ payload_label }}, entered_zones {{ payload_entered_zones }}, frigate_labels {{ frigate_labels }}, frigate_zones {{ frigate_zones }}
        {{ trigger.payload_json['after'] }}
      data:
        group: "{{ frigate_camera }}-sprinkler-intrusion-alert"
        image: >-
          {{ hass_base_url }}/api/frigate/notifications/{{ id }}/thumbnail.jpg
        tag: '{{ id }}'
        push:
          sound:
            name: "default"
            critical: 1
            volume: 0.0

  # - choose:
  #   - alias: Frigate Event
  #     conditions:
  #       - condition: trigger
  #         id: frigate-event
  #       - '{{ is_state(this.entity_id, ''on'') }}'
  #       #- '{{ not this.attributes.last_triggered or (now() - this.attributes.last_triggered).seconds > cooldown }}'
  #     sequence:
  #       - variables:
  #           id: "{{ trigger.payload_json['after']['id'] }}"
  #           object: "{{ trigger.payload_json['after']['label'] }}"
  #           label: "{{ object | title }}"
  #           entered_zones: "{{ trigger.payload_json['after']['entered_zones'] }}"

  #       # - alias: Send Telegram Notification
  #       #   service: telegram_bot.send_photo
  #       #   data:
  #       #     target: "{{ telegram_chat_id }}"
            
  #       # - alias: Send notification to Telegram
  #       #   service: !input notify_group
  #       #   data_template:
  #       #     title: ðŸ’¦ {{ label }} detected on {{ frigate_camera_name }} camera.
  #       #     message: |
  #       #       DEBUG: id {{ id }}, object {{ object }}, label {{ label }}, entered_zones {{ entered_zones }}, frigate_labels {{ frigate_labels }}, frigate_zones {{ frigate_zones }}
  #       #       {{ trigger.payload_json['after'] }}
  #       #     data:
  #       #       photo:
  #       #         - url: "{{ hass_base_url }}/api/frigate/notifications/{{ id }}/thumbnail.jpg"
  #       #           caption: >-
  #       #             {{ label }} detected on {{ frigate_camera_name }} camera.

  #       - alias: Send notification
  #         service: !input notify_group
  #         data_template:
  #           title: ðŸ’¦ {{ label }} detected on {{ frigate_camera_name }} camera.
  #           message: |
  #             DEBUG: id {{ id }}, object {{ object }}, label {{ label }}, entered_zones {{ entered_zones }}, frigate_labels {{ frigate_labels }}, frigate_zones {{ frigate_zones }}
  #             {{ trigger.payload_json['after'] }}
  #           data:
  #             group: "{{ frigate_camera }}-sprinkler-intrusion-alert"
  #             image: >-
  #               {{ hass_base_url }}/api/frigate/notifications/{{ id }}/thumbnail.jpg
  #             tag: '{{ id }}'
  #             push:
  #               sound:
  #                 name: "default"
  #                 critical: 1
  #                 volume: 0.0

  #       - alias: Verify this zone is enabled
  #         condition: and
  #         conditions:
  #           - '{{ not frigate_zones|length or frigate_zones|select(''in'', entered_zones)|list|length > 0 }}'

  #       - alias: Verify this object is enabled
  #         condition: template
  #         value_template: '{{ not frigate_labels|length or object in frigate_labels }}'

  #       - alias: Send notification
  #         service: !input notify_group
  #         data_template:
  #           title: ðŸ’¦ {{ label }} detected on {{ frigate_camera_name }} camera.
  #           message: |
  #             Starting sprinklers
  #           data:
  #             group: "{{ frigate_camera }}-sprinkler-intrusion-alert"
  #             image: >-
  #               {{ hass_base_url }}/api/frigate/notifications/{{ id }}/thumbnail.jpg
  #             tag: '{{ id }}'
  #             when: '{{ trigger.payload_json["after"]["start_time"]|int }}'
  #             push:
  #               sound:
  #                 name: "default"
  #                 critical: 1
  #                 volume: 0.0